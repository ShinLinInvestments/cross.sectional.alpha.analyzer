ym
reqHistoricalData(tws, ym)
reqHistoricalData(tws, ym, barSize = '1 min', whatToShow = 'BID_ASK')
library(data.table)
seco = twsFuture('YM', exch='ECBOT', expiry='201806')
pv0 = reqHistoricalData(tws, seco, barSize = '1 min', whatToShow = 'BID_ASK')
pv0 = data.table(pv0)
pv0
seco = twsFuture('YM', exch='ECBOT', expiry='201806')
pv0 = reqHistoricalData(tws, seco, barSize = '1 min', whatToShow = 'BID_ASK')
pv1 = data.table(pv0)
head(pv0)
class(pv0)
columns(pv0)
colnames(pv0)
rownames(pv0)
names(pv0)
index(pv0)
seco = twsFuture('YM', exch='ECBOT', expiry='201806')
pv0 = reqHistoricalData(tws, seco, barSize = '1 min', whatToShow = 'BID_ASK')
pv1 = data.table(datetime = index(pv0), pv0)
pv1
seco = twsFuture('YM', exch='ECBOT', expiry='201806')
pv0 = reqHistoricalData(tws, seco, barSize = '1 min', whatToShow = 'BID_ASK', duration = "1 D")
pv1 = data.table(datetime = index(pv0), pv0)
pv1
pv1[370:400]
pv1[,plot(get('JUN 18.Open YM'))]
pv1[,2,with=F]
plot(pv1[,2,with=F])
plot(as.numeric(pv1[,2,with=F]))
plot(unlist(pv1[,2,with=F]))
plot(unlist(pv1[,2,with=F]), type='l')
colnames(pv1) = c('datetime','Open','High','Low','Close','Vlm','wap','hasGaps','Count')
pv1
pv1[High<= Close]
pv1[order(High-Low)]
x=c(1,-1,1,-1,1,-1)
y=c(1.-1,1,-1,0,0)
cor(x,y)
x
y
y=c(1.-1,1,-1,0,0)
y
y=c(1,-1,1,-1,0,0)
y
cor(x,y)
y=c(1,-1,1,-1,1,-1)
cor(x,y)
y=c(1,-1,1,-1,-1,=1)
y=c(1,-1,1,-1,-1,1)
cor(x,y)
z=c(1,-1,-1,1,-1,-1)
z=c(1,-1,-1,1,-1,1)
cor(x)
cor(x,z)
cor(y,z)
library(data.table)
library(ggplot2)
library(memoise)
setwd("H:/Goldhedge/Career/Opportunities/QuantFin/Coatue/")
utils.date2bday <- memoise( function(d){
if(length(d) > 1){
return(unlist(lapply(d, utils.date2bday)))
}
return(all.trading.dates[all.trading.dates > d][1])
} )
library(data.table)
library(ggplot2)
library(memoise)
setwd("H:/Goldhedge/Career/Opportunities/QuantFin/Coatue/")
utils.checkCond <- function(cond, err.message){
if(all(cond)) return()
stop(err.message)
}
utils.gen.bdays <- function(){
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!weekdays(all.trading.dates) %in% c('Saturday','Sunday')]
nyse.holidays = as.Date(c(
'1999-01-01','1999-01-18','1999-02-15','1999-04-02','1999-05-31','1999-07-05','1999-09-06','1999-11-25','1999-12-24',
'2000-01-17','2000-02-21','2000-04-21','2000-05-29','2000-07-04','2000-09-04','2000-11-23','2000-12-25',
'2001-01-01','2001-01-15','2001-02-19','2001-04-13','2001-05-28','2001-07-04','2001-09-03','2001-09-11','2001-09-12','2001-09-13','2001-09-14','2001-11-22','2001-12-25',
'2002-01-01','2002-01-21','2002-02-18','2002-03-29','2002-05-27','2002-07-04','2002-09-02','2002-11-28','2002-12-25',
'2003-01-01','2003-01-20','2003-02-17','2003-04-18','2003-05-26','2003-07-04','2003-09-01','2003-11-27','2003-12-25',
'2004-01-01','2004-01-19','2004-02-16','2004-04-09','2004-05-31','2004-06-11','2004-07-05','2004-09-06','2004-11-25','2004-12-24',
'2005-01-17','2005-02-21','2005-03-25','2005-05-30','2005-07-04','2005-09-05','2005-11-24','2005-12-26',
'2006-01-02','2006-01-16','2006-02-20','2006-04-14','2006-05-29','2006-07-04','2006-09-04','2006-11-23','2006-12-25',
'2007-01-01','2007-01-02','2007-01-15','2007-02-19','2007-04-06','2007-05-28','2007-07-04','2007-09-03','2007-11-22','2007-12-25',
'2008-01-01','2008-01-21','2008-02-18','2008-03-21','2008-05-26','2008-07-04','2008-09-01','2008-11-27','2008-12-25',
'2009-01-01','2009-01-19','2009-02-16','2009-04-10','2009-05-25','2009-07-03','2009-09-07','2009-11-26','2009-12-25',
'2010-01-01','2010-01-18','2010-02-15','2010-04-02','2010-05-31','2010-07-05','2010-09-06','2010-11-25','2010-12-24',
'2011-01-17','2011-02-21','2011-04-22','2011-05-30','2011-07-04','2011-09-05','2011-11-24','2011-12-26',
'2012-01-02','2012-01-16','2012-02-20','2012-04-06','2012-05-28','2012-07-04','2012-09-03','2012-10-29','2012-10-30','2012-11-22','2012-12-25',
'2013-01-01','2013-01-21','2013-02-18','2013-03-29','2013-05-27','2013-07-04','2013-09-02','2013-11-28','2013-12-25',
'2014-01-01','2014-01-20','2014-02-17','2014-04-18','2014-05-26','2014-07-04','2014-09-01','2014-11-27','2014-12-25',
'2015-01-01','2015-01-19','2015-02-16','2015-04-03','2015-05-25','2015-07-03','2015-09-07','2015-11-26','2015-12-25',
'2016-01-01','2016-01-18','2016-02-15','2016-03-25','2016-05-30','2016-07-04','2016-09-05','2016-11-24','2016-12-25',
'2017-01-02','2017-01-16','2017-02-20','2017-04-14','2017-05-29','2017-07-04','2017-09-04','2017-11-23','2017-12-25',
'2018-01-01','2018-01-15','2018-01-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-22','2018-12-25'))
return(all.trading.dates[which(!all.trading.dates %in% nyse.holidays)])
}
utils.date2bday <- memoise( function(d){
if(length(d) > 1){
return(unlist(lapply(d, utils.date2bday)))
}
return(all.trading.dates[all.trading.dates > d][1])
} )
utils.diff.bday <- function(d1, d2){
utils.checkCond((length(d1) == length(d2)) | (length(d1) == 1) | (length(d2) == 1), paste(deparse(sys.call()), "two input arguments have different length"))
if((length(d1) == 1) & (length(d2) != 1)){
return(utils.diff.bday(rep(d1, length(d2)), d2))
} else if((length(d2) == 1) & (length(d1) != 1)){
return(utils.diff.bday(d1, rep(d2, length(d1))))
}
if(length(d1) > 1){
return(unlist(lapply(1:length(d1), function(i){ utils.diff.bday(d1[i], d2[i]) })))
}
if(d1 > d2) return(-utils.diff.bday(d2, d1))
return(length(all.trading.dates[(all.trading.dates >= d1) & (all.trading.dates < d2)]))
}
utils.add.bday <- function(d, days){
if(days == 0) return(d)
if(length(d) > 1){
return(unlist(lapply(d, function(d0){ utils.add.bday(d0, days) })))
}
curidx = which(all.trading.dates == d)
if(length(curidx) == 0) curidx = min(which(all.trading.dates >= d))
tgtidx = curidx + days
if(tgtidx < 1) return(NA)
return(all.trading.dates[tgtidx])
}
company.data = data.table(read.csv("source.data/company_data.csv", stringsAsFactors = FALSE))[,.(Ticker, Sector=Division.SIC, Industry=Major.SIC)]
financial.data = data.table(read.csv("source.data/financial_data.csv", stringsAsFactors = FALSE))
indice.data = data.table(read.csv("source.data/indice_data.csv", stringsAsFactors = FALSE))
market.data = data.table(read.csv("source.data/market_data.csv", stringsAsFactors = FALSE))
all.trading.dates = utils.gen.bdays()
library(data.table)
library(data.table)
gen.size.loading <- function(market.data, halflife = 42, lookback = 504){
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
rbindlist( lapply( all.dates, function(d){
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sum( ewma * Market.Cap ) / sum(ewma)), by=Ticker][, SIZE := log(mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
} ) )
}
gen.size.loading(market.data)
sumNA <- function(...) sum(..., na.rm = TRUE)
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
halflife = 42
lookback = 504
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
all.dates
all.dates[1]
d=all.dates[1]
d
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker][, SIZE := log(mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker][, SIZE := log(mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
res
res[is.na(SIZE)]
res[1:100]
market.cap.cur[,.(Date = d, mktcap.ewma = sum( ewma * Market.Cap ) / sum(ewma)), by=Ticker][is.na(mktcap.ewma)]
market.cap.cur[is.na(MTD)]
market.cap.cur[Ticker=="MTD"]
market.cap.cur[Ticker=="INGR"]
market.cap.cur[Ticker=="QGEN"]
res
res[Ticker=="INGR"]
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date][!is.na(Market.Cap)]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker][, SIZE := log(mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
res
gen.size.loading <- function(market.data, halflife = 42, lookback = 504){
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
rbindlist( lapply( all.dates, function(d){
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date][!is.na(Market.Cap)]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker][, SIZE := log(mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
} ) )
}
gen.size.loading(market.data)
d="2005-10-06"
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date][!is.na(Market.Cap)]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker][, SIZE := log(mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
res
market.cap.cur
utils.add.bday(d, -lookback)
lookback
all.trading.dates
all.trading.dates[all.trading.dates==d]
whichall.trading.dates==d]
which(all.trading.dates==d)
2051-504
all.trading.dates[1547]
all.trading.dates[1547:1560]
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!weekdays(all.trading.dates) %in% c('Saturday','Sunday')]
all.trading.dates[1547:1560]
weekdays(all.trading.dates[1:3])
Sys.setlocale("LC_TIME","English United States")
weekdays(all.trading.dates[1:3])
Sys.setlocale("LC_TIME","en_US")
as.POSIXlt(Day)$wday
as.POSIXlt(d)$wday
Sys.setlocale("LC_TIME","English")
weekdays(all.trading.dates[1:3])
as.POSIXlt(all.trading.dates[1:3])$wday
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!as.POSIXlt(all.trading.dates) %in% c(1,2,3,4,5)]
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!as.POSIXlt(all.trading.dates)$wday %in% c(1,2,3,4,5)]
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!as.POSIXlt(all.trading.dates)$wday %in% c(0,6,7)]
utils.gen.bdays <- function(){
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!as.POSIXlt(all.trading.dates)$wday %in% c(0,6,7)]
nyse.holidays = as.Date(c(
'1999-01-01','1999-01-18','1999-02-15','1999-04-02','1999-05-31','1999-07-05','1999-09-06','1999-11-25','1999-12-24',
'2000-01-17','2000-02-21','2000-04-21','2000-05-29','2000-07-04','2000-09-04','2000-11-23','2000-12-25',
'2001-01-01','2001-01-15','2001-02-19','2001-04-13','2001-05-28','2001-07-04','2001-09-03','2001-09-11','2001-09-12','2001-09-13','2001-09-14','2001-11-22','2001-12-25',
'2002-01-01','2002-01-21','2002-02-18','2002-03-29','2002-05-27','2002-07-04','2002-09-02','2002-11-28','2002-12-25',
'2003-01-01','2003-01-20','2003-02-17','2003-04-18','2003-05-26','2003-07-04','2003-09-01','2003-11-27','2003-12-25',
'2004-01-01','2004-01-19','2004-02-16','2004-04-09','2004-05-31','2004-06-11','2004-07-05','2004-09-06','2004-11-25','2004-12-24',
'2005-01-17','2005-02-21','2005-03-25','2005-05-30','2005-07-04','2005-09-05','2005-11-24','2005-12-26',
'2006-01-02','2006-01-16','2006-02-20','2006-04-14','2006-05-29','2006-07-04','2006-09-04','2006-11-23','2006-12-25',
'2007-01-01','2007-01-02','2007-01-15','2007-02-19','2007-04-06','2007-05-28','2007-07-04','2007-09-03','2007-11-22','2007-12-25',
'2008-01-01','2008-01-21','2008-02-18','2008-03-21','2008-05-26','2008-07-04','2008-09-01','2008-11-27','2008-12-25',
'2009-01-01','2009-01-19','2009-02-16','2009-04-10','2009-05-25','2009-07-03','2009-09-07','2009-11-26','2009-12-25',
'2010-01-01','2010-01-18','2010-02-15','2010-04-02','2010-05-31','2010-07-05','2010-09-06','2010-11-25','2010-12-24',
'2011-01-17','2011-02-21','2011-04-22','2011-05-30','2011-07-04','2011-09-05','2011-11-24','2011-12-26',
'2012-01-02','2012-01-16','2012-02-20','2012-04-06','2012-05-28','2012-07-04','2012-09-03','2012-10-29','2012-10-30','2012-11-22','2012-12-25',
'2013-01-01','2013-01-21','2013-02-18','2013-03-29','2013-05-27','2013-07-04','2013-09-02','2013-11-28','2013-12-25',
'2014-01-01','2014-01-20','2014-02-17','2014-04-18','2014-05-26','2014-07-04','2014-09-01','2014-11-27','2014-12-25',
'2015-01-01','2015-01-19','2015-02-16','2015-04-03','2015-05-25','2015-07-03','2015-09-07','2015-11-26','2015-12-25',
'2016-01-01','2016-01-18','2016-02-15','2016-03-25','2016-05-30','2016-07-04','2016-09-05','2016-11-24','2016-12-25',
'2017-01-02','2017-01-16','2017-02-20','2017-04-14','2017-05-29','2017-07-04','2017-09-04','2017-11-23','2017-12-25',
'2018-01-01','2018-01-15','2018-01-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-22','2018-12-25'))
return(all.trading.dates[which(!all.trading.dates %in% nyse.holidays)])
}
Sys.setlocale("LC_TIME","English")
setwd("H:/Goldhedge/Career/Opportunities/QuantFin/Coatue/")
utils.checkCond <- function(cond, err.message){
if(all(cond)) return()
stop(err.message)
}
utils.gen.bdays <- function(){
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!as.POSIXlt(all.trading.dates)$wday %in% c(0,6,7)]
nyse.holidays = as.Date(c(
'1999-01-01','1999-01-18','1999-02-15','1999-04-02','1999-05-31','1999-07-05','1999-09-06','1999-11-25','1999-12-24',
'2000-01-17','2000-02-21','2000-04-21','2000-05-29','2000-07-04','2000-09-04','2000-11-23','2000-12-25',
'2001-01-01','2001-01-15','2001-02-19','2001-04-13','2001-05-28','2001-07-04','2001-09-03','2001-09-11','2001-09-12','2001-09-13','2001-09-14','2001-11-22','2001-12-25',
'2002-01-01','2002-01-21','2002-02-18','2002-03-29','2002-05-27','2002-07-04','2002-09-02','2002-11-28','2002-12-25',
'2003-01-01','2003-01-20','2003-02-17','2003-04-18','2003-05-26','2003-07-04','2003-09-01','2003-11-27','2003-12-25',
'2004-01-01','2004-01-19','2004-02-16','2004-04-09','2004-05-31','2004-06-11','2004-07-05','2004-09-06','2004-11-25','2004-12-24',
'2005-01-17','2005-02-21','2005-03-25','2005-05-30','2005-07-04','2005-09-05','2005-11-24','2005-12-26',
'2006-01-02','2006-01-16','2006-02-20','2006-04-14','2006-05-29','2006-07-04','2006-09-04','2006-11-23','2006-12-25',
'2007-01-01','2007-01-02','2007-01-15','2007-02-19','2007-04-06','2007-05-28','2007-07-04','2007-09-03','2007-11-22','2007-12-25',
'2008-01-01','2008-01-21','2008-02-18','2008-03-21','2008-05-26','2008-07-04','2008-09-01','2008-11-27','2008-12-25',
'2009-01-01','2009-01-19','2009-02-16','2009-04-10','2009-05-25','2009-07-03','2009-09-07','2009-11-26','2009-12-25',
'2010-01-01','2010-01-18','2010-02-15','2010-04-02','2010-05-31','2010-07-05','2010-09-06','2010-11-25','2010-12-24',
'2011-01-17','2011-02-21','2011-04-22','2011-05-30','2011-07-04','2011-09-05','2011-11-24','2011-12-26',
'2012-01-02','2012-01-16','2012-02-20','2012-04-06','2012-05-28','2012-07-04','2012-09-03','2012-10-29','2012-10-30','2012-11-22','2012-12-25',
'2013-01-01','2013-01-21','2013-02-18','2013-03-29','2013-05-27','2013-07-04','2013-09-02','2013-11-28','2013-12-25',
'2014-01-01','2014-01-20','2014-02-17','2014-04-18','2014-05-26','2014-07-04','2014-09-01','2014-11-27','2014-12-25',
'2015-01-01','2015-01-19','2015-02-16','2015-04-03','2015-05-25','2015-07-03','2015-09-07','2015-11-26','2015-12-25',
'2016-01-01','2016-01-18','2016-02-15','2016-03-25','2016-05-30','2016-07-04','2016-09-05','2016-11-24','2016-12-25',
'2017-01-02','2017-01-16','2017-02-20','2017-04-14','2017-05-29','2017-07-04','2017-09-04','2017-11-23','2017-12-25',
'2018-01-01','2018-01-15','2018-01-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-22','2018-12-25'))
return(all.trading.dates[which(!all.trading.dates %in% nyse.holidays)])
}
utils.date2bday <- memoise( function(d){
if(length(d) > 1){
return(unlist(lapply(d, utils.date2bday)))
}
return(all.trading.dates[all.trading.dates > d][1])
} )
utils.diff.bday <- function(d1, d2){
utils.checkCond((length(d1) == length(d2)) | (length(d1) == 1) | (length(d2) == 1), paste(deparse(sys.call()), "two input arguments have different length"))
if((length(d1) == 1) & (length(d2) != 1)){
return(utils.diff.bday(rep(d1, length(d2)), d2))
} else if((length(d2) == 1) & (length(d1) != 1)){
return(utils.diff.bday(d1, rep(d2, length(d1))))
}
if(length(d1) > 1){
return(unlist(lapply(1:length(d1), function(i){ utils.diff.bday(d1[i], d2[i]) })))
}
if(d1 > d2) return(-utils.diff.bday(d2, d1))
return(length(all.trading.dates[(all.trading.dates >= d1) & (all.trading.dates < d2)]))
}
utils.add.bday <- function(d, days){
if(days == 0) return(d)
if(length(d) > 1){
return(unlist(lapply(d, function(d0){ utils.add.bday(d0, days) })))
}
curidx = which(all.trading.dates == d)
if(length(curidx) == 0) curidx = min(which(all.trading.dates >= d))
tgtidx = curidx + days
if(tgtidx < 1) return(NA)
return(all.trading.dates[tgtidx])
}
sumNA <- function(...) sum(..., na.rm = TRUE)
all.trading.dates = utils.gen.bdays()
utils.add.bday(d, -lookback)
d
library(data.table)
gen.size.loading <- function(market.data, halflife = 42, lookback = 504){
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
rbindlist( lapply( all.dates, function(d){
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date][!is.na(Market.Cap)]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker][, SIZE := log(mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
} ) )
}
gen.size.loading(market.data)
market.caps = c()
market.caps.cur = c()
market.caps
market.cap.cur = c()
source('H:/Goldhedge/Career/Opportunities/QuantFin/Coatue/risk.model.R')
library(data.table)
library(ggplot2)
library(memoise)
Sys.setlocale("LC_TIME","English")
setwd("H:/Goldhedge/Career/Opportunities/QuantFin/Coatue/")
utils.checkCond <- function(cond, err.message){
if(all(cond)) return()
stop(err.message)
}
utils.gen.bdays <- function(){
all.trading.dates = seq(as.Date("2000-01-01"), Sys.Date(), by="1 day")
all.trading.dates = all.trading.dates[!as.POSIXlt(all.trading.dates)$wday %in% c(0,6,7)]
nyse.holidays = as.Date(c(
'1999-01-01','1999-01-18','1999-02-15','1999-04-02','1999-05-31','1999-07-05','1999-09-06','1999-11-25','1999-12-24',
'2000-01-17','2000-02-21','2000-04-21','2000-05-29','2000-07-04','2000-09-04','2000-11-23','2000-12-25',
'2001-01-01','2001-01-15','2001-02-19','2001-04-13','2001-05-28','2001-07-04','2001-09-03','2001-09-11','2001-09-12','2001-09-13','2001-09-14','2001-11-22','2001-12-25',
'2002-01-01','2002-01-21','2002-02-18','2002-03-29','2002-05-27','2002-07-04','2002-09-02','2002-11-28','2002-12-25',
'2003-01-01','2003-01-20','2003-02-17','2003-04-18','2003-05-26','2003-07-04','2003-09-01','2003-11-27','2003-12-25',
'2004-01-01','2004-01-19','2004-02-16','2004-04-09','2004-05-31','2004-06-11','2004-07-05','2004-09-06','2004-11-25','2004-12-24',
'2005-01-17','2005-02-21','2005-03-25','2005-05-30','2005-07-04','2005-09-05','2005-11-24','2005-12-26',
'2006-01-02','2006-01-16','2006-02-20','2006-04-14','2006-05-29','2006-07-04','2006-09-04','2006-11-23','2006-12-25',
'2007-01-01','2007-01-02','2007-01-15','2007-02-19','2007-04-06','2007-05-28','2007-07-04','2007-09-03','2007-11-22','2007-12-25',
'2008-01-01','2008-01-21','2008-02-18','2008-03-21','2008-05-26','2008-07-04','2008-09-01','2008-11-27','2008-12-25',
'2009-01-01','2009-01-19','2009-02-16','2009-04-10','2009-05-25','2009-07-03','2009-09-07','2009-11-26','2009-12-25',
'2010-01-01','2010-01-18','2010-02-15','2010-04-02','2010-05-31','2010-07-05','2010-09-06','2010-11-25','2010-12-24',
'2011-01-17','2011-02-21','2011-04-22','2011-05-30','2011-07-04','2011-09-05','2011-11-24','2011-12-26',
'2012-01-02','2012-01-16','2012-02-20','2012-04-06','2012-05-28','2012-07-04','2012-09-03','2012-10-29','2012-10-30','2012-11-22','2012-12-25',
'2013-01-01','2013-01-21','2013-02-18','2013-03-29','2013-05-27','2013-07-04','2013-09-02','2013-11-28','2013-12-25',
'2014-01-01','2014-01-20','2014-02-17','2014-04-18','2014-05-26','2014-07-04','2014-09-01','2014-11-27','2014-12-25',
'2015-01-01','2015-01-19','2015-02-16','2015-04-03','2015-05-25','2015-07-03','2015-09-07','2015-11-26','2015-12-25',
'2016-01-01','2016-01-18','2016-02-15','2016-03-25','2016-05-30','2016-07-04','2016-09-05','2016-11-24','2016-12-25',
'2017-01-02','2017-01-16','2017-02-20','2017-04-14','2017-05-29','2017-07-04','2017-09-04','2017-11-23','2017-12-25',
'2018-01-01','2018-01-15','2018-01-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-22','2018-12-25'))
return(all.trading.dates[which(!all.trading.dates %in% nyse.holidays)])
}
utils.date2bday <- memoise( function(d){
if(length(d) > 1){
return(unlist(lapply(d, utils.date2bday)))
}
return(all.trading.dates[all.trading.dates > d][1])
} )
utils.diff.bday <- function(d1, d2){
utils.checkCond((length(d1) == length(d2)) | (length(d1) == 1) | (length(d2) == 1), paste(deparse(sys.call()), "two input arguments have different length"))
if((length(d1) == 1) & (length(d2) != 1)){
return(utils.diff.bday(rep(d1, length(d2)), d2))
} else if((length(d2) == 1) & (length(d1) != 1)){
return(utils.diff.bday(d1, rep(d2, length(d1))))
}
if(length(d1) > 1){
return(unlist(lapply(1:length(d1), function(i){ utils.diff.bday(d1[i], d2[i]) })))
}
if(d1 > d2) return(-utils.diff.bday(d2, d1))
return(length(all.trading.dates[(all.trading.dates >= d1) & (all.trading.dates < d2)]))
}
utils.add.bday <- function(d, days){
if(days == 0) return(d)
if(length(d) > 1){
return(unlist(lapply(d, function(d0){ utils.add.bday(d0, days) })))
}
curidx = which(all.trading.dates == d)
if(length(curidx) == 0) curidx = min(which(all.trading.dates >= d))
tgtidx = curidx + days
if(tgtidx < 1) return(NA)
return(all.trading.dates[tgtidx])
}
sumNA <- function(...) sum(..., na.rm = TRUE)
meanNA <- function(...) mean(..., na.rm = TRUE)
sdNA <- function(...) sd(..., na.rm = TRUE)
if(!exists('company.data')){
company.data = data.table(read.csv("source.data/company_data.csv", stringsAsFactors = FALSE))[,.(Ticker, Sector=Division.SIC, Industry=Major.SIC)]
}
if(!exists('financial.data')){
financial.data = data.table(read.csv("source.data/financial_data.csv", stringsAsFactors = FALSE))
}
if(!exists('indice.data')){
indice.data = data.table(read.csv("source.data/indice_data.csv", stringsAsFactors = FALSE))
}
if(!exists('market.data')){
market.data = data.table(read.csv("source.data/market_data.csv", stringsAsFactors = FALSE))
}
all.trading.dates = utils.gen.bdays()
library(data.table)
gen.size.loading <- function(market.data, halflife = 42, lookback = 504, startDate = "1999-01-01"){
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
all.dates = all.dates[which(all.dates >= startDate)]
rbindlist( lapply( all.dates, function(d){
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date][!is.na(Market.Cap)]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker]
res[, log.mktcap.ewma := log(mktcap.ewma)][, SIZE := (log.mktcap.ewma - meanNA(log.mktcap.ewma)) / sdNA(log.mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
} ) )
}
gen.size.loading(market.data[Date < "2016-01-01"], startDate = "2014-01-01")
library(data.table)
gen.size.loading <- function(market.data, halflife = 42, lookback = 504, startDate = "1999-01-01"){
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
all.dates = all.dates[which(all.dates >= startDate)]
rbindlist( lapply( all.dates, function(d){
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date][!is.na(Market.Cap)]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker]
res[, log.mktcap.ewma := log(mktcap.ewma)][, SIZE := (log.mktcap.ewma - meanNA(log.mktcap.ewma)) / sdNA(log.mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
} ) )
}
gen.size.loading(market.data[Date < "2016-01-01"][Date >= "2011-12-01"], startDate = "2014-02-21")
all.trading.dates
"2014-07-04" %in% all.trading.dates
library(data.table)
gen.size.loading <- function(market.data, halflife = 42, lookback = 504, startDate = "1999-01-01"){
market.caps = market.data[,.(Date, Ticker, Market.Cap)]
all.dates = market.caps[, sort(unique(Date))]
all.dates = all.dates[which(all.dates >= startDate)]
rbindlist( lapply( all.dates, function(d){
market.cap.cur = market.caps[Date <= d][utils.add.bday(d, -lookback) <= Date][!is.na(Market.Cap)]
cur.lookback.dates = market.cap.cur[, sort(unique(Date))]
print(paste("size loading generating for", d, "with", length(cur.lookback.dates), "dates"))
bday.diff.map = data.table(Date=cur.lookback.dates, date.diff=utils.diff.bday(cur.lookback.dates, d))
market.cap.cur = merge(market.cap.cur, bday.diff.map, by=c('Date'), all=T)
market.cap.cur[, ewma := 0.5 ^ (date.diff / halflife)]
res = market.cap.cur[,.(Date = d, mktcap.ewma = sumNA( ewma * Market.Cap ) / sum(ewma)), by=Ticker]
res[, log.mktcap.ewma := log(mktcap.ewma)][, SIZE := (log.mktcap.ewma - meanNA(log.mktcap.ewma)) / sdNA(log.mktcap.ewma)]
write.csv(res, paste("risk.loading/SIZE/SIZE.", d, '.csv', sep=''), quote = F, row.names = F)
res
} ) )
}
gen.size.loading(market.data[Date < "2016-01-01"][Date >= "2011-12-01"], startDate = "2014-07-10")
gen.size.loading(market.data[Date < "2008-01-01"][Date >= "2003-12-01"], startDate = "2006-01-01")
